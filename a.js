/**
 * 高降序，>=身高人数升序
 * 高不等，低不影响高，先高后低，低的插入位置只与>=身高人数关联
 * 高相等，>=身高人数 多一定在少右边。先少，少右边插入多，多不影响少
 */

var reconstructQueue = function(people) {
  let pQueue = [people[0]];
  for (let i = 1; i < people.length; i++) {
      let target = people[i];
      let count = 0;
      for(let p = 0; p < pQueue.length; p++) {
          if (target[0] <= pQueue[p][0]) {
              count++;
          }
          if (count === target[1]) break;
      }
      // count = target[1] < count ? target[1] : count;
      pQueue.splice(count, 0, target);
  }

  return pQueue;
};

let people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]];
// console.log(reconstructQueue(people))

console.log(people.sort((a, b) => 
b[0] - a[0] || a[1] - b[1]
))
people.sort((a, b) => 
b[0] - a[0] || a[1] - b[1]
).reduce()

// var reconstructQueue = function(people) {
//   return people.sort(
//     (a, b) => b[0] - a[0] || a[1] - b[1])
//     .reduce(
//       (p, v) => (
//         p.splice(v[1], 0, v)
//       , p)
//     , [])
// };


// [7,0],[4,4],[7,1],[5,0],[6,1],[5,2]
// 身高 -> 升序(小到大) && 身高相等时，人数升序 =》 [[4, 4], [5, 0], [5, 2], [6, 1], [7, 0], [7, 1]]
// 按照人数插入对应下标位置 []
// [[4, 4]]
// [[5, 0], [4, 4]]
// [[5, 0], [5, 2], [4, 4]]
// [[5, 0], [6, 1], [5, 2], [4, 4]]
// [[7, 0], [5, 0], [6, 1], [5, 2], [4, 4]]
// [[7, 0], [7, 1], [5, 0], [6, 1], [5, 2], [4, 4]]

// [7,0],[4,4],[7,1],[5,0],[6,1],[5,2]
// 身高 -> 升序(小到大) && 身高相等时，人数降序 =》 [[4, 4], [5, 2], [5, 0], [6, 1], [7, 1], [7, 0]]
// 按照人数插入对应下标位置 []
// [[4, 4]]
// [[5, 2], [4, 4]]
// [[5, 0], [5, 2], [4, 4]]
// [[5, 0], [5, 2], [6, 1], [4, 4]]
// [[5, 0], [5, 2], [6, 1], [4, 4], [7, 1]]
// [[7, 0], [5, 0], [6, 1], [5, 2], [4, 4], [7, 1]]

// [[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]
// [[5, 0], [7, 0], [5, 2] [6, 1], [4, 4], [7, 1]]

